//
//  GetWeatherViewController.swift
//  SimplyWeather
//
//  Created by Bhat, Nanda on 3/26/17.
//  Copyright (c) 2017 Bhat, Nanda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol GetWeatherViewControllerInput
{
  func displayWeather(viewModel: GetWeather.Location.ViewModel)
}

protocol GetWeatherViewControllerOutput
{
    func getWeatherUpdate(request: GetWeather.Location.Request)
    
}

class GetWeatherViewController: UIViewController, GetWeatherViewControllerInput, CLLocationManagerDelegate
{
  var output: GetWeatherViewControllerOutput!
  var router: GetWeatherRouter!
    var isFarenheit = true
    
    //MARK: Properties
    
    @IBOutlet weak var CityNameLabel: UILabel!
    @IBOutlet weak var WeatherDescriptionLabel: UILabel!
    @IBOutlet weak var WeatherTemperatureLabel: UILabel!
    
    //MARK: Actions
    @IBAction func toggleUnits(_ sender: Any) {
    
        if isFarenheit {
            let Celcius = Measurement(value: Double(WeatherTemperatureLabel.text!)! , unit: UnitTemperature.fahrenheit).converted(to: UnitTemperature.celsius)
            WeatherTemperatureLabel.text = "\(Celcius.value)"
            isFarenheit = false
        }
        else {
            let farenheit = Measurement(value: Double(WeatherTemperatureLabel.text!)!, unit: UnitTemperature.celsius).converted(to: UnitTemperature.fahrenheit)
            WeatherTemperatureLabel.text = "\(farenheit.value)"
            isFarenheit = true
        }
    }
    
    
    //Initialize location manager
    var locationManager: CLLocationManager = CLLocationManager()

    var latitude=""
    var longitude = ""
    
    
    
    // MARK: - Object lifecycle
  
  override func awakeFromNib()
  {
    super.awakeFromNib()
    GetWeatherConfigurator.sharedInstance.configure(viewController: self)
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setUpLocationManager()
    
  }
    
    
  
    //MARK: Location Manager set up
    
    func setUpLocationManager() {
        
        // Set the delegate
        self.locationManager.delegate = self
        
        getQuickLocationUpdate()
        
    }
    
    
    func getQuickLocationUpdate() {
        
        // Request location authorization
        self.locationManager.requestWhenInUseAuthorization()
        
        // Request a location update
        self.locationManager.requestLocation()
        // Note: requestLocation may timeout and produce an error if authorization has not yet been granted by the user
    }
    
    
    //MARK: Location manager error handling
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        
        print("Error while updating location " + error.localizedDescription)
    }
    
    //MARK: Location manager receive data
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        
        let latestLocation: CLLocation = locations[locations.count - 1]

        self.latitude = String(format: "%.4f",
                          latestLocation.coordinate.latitude)
        self.longitude = String(format: "%.4f",
                           latestLocation.coordinate.longitude)
        
        getWeatherUpdate()
    }
    
  // MARK: - Event handling
  
  func getWeatherUpdate()
  {
    // NOTE: Ask the Interactor to do some work
    print (self.latitude)
    print (self.longitude)
    let request = GetWeather.Location.Request(latitude: self.latitude, longitude: self.longitude, isFarenheit: self.isFarenheit)
    output.getWeatherUpdate(request: request)
    
  }
    
  // MARK: - Display logic
  
  func displayWeather(viewModel: GetWeather.Location.ViewModel)
  {
    // NOTE: Display the result from the Presenter
        print("in display weather")
        print (viewModel.city)
        print (viewModel.temperature)
        CityNameLabel.text = viewModel.city
        WeatherTemperatureLabel.text = viewModel.temperature
    
  }
    
    
}
